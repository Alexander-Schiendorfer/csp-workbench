/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BacktrackingPanel.java
 *
 * Created on Dec 25, 2010, 8:52:49 PM
 */

package hgb.csp.search.backtracking.view;

import hgb.csp.search.SelectNextValueStrategy;
import hgb.csp.search.SelectUnassignedVariableStrategy;
import hgb.csp.search.backtracking.order.StaticVariableOrder;
import hgb.csp.search.backtracking.BacktrackingData;
import hgb.csp.search.backtracking.BasicValueSelecter;
import hgb.csp.search.backtracking.ContraintPropagationLevel;
import hgb.csp.search.backtracking.KeyStrategyPair;
import hgb.csp.search.backtracking.order.MinimumConflictsValueSelecter;
import hgb.csp.search.backtracking.order.RandomValueSelecter;
import hgb.csp.search.backtracking.UnorderedVariableSelector;
import hgb.csp.search.backtracking.order.MinimumRemainingValuesSelecter;
import hgb.csp.search.backtracking.order.MostConstrainedComparator;
import hgb.csp.search.backtracking.order.RandomVariableComparator;
import hgb.csp.view.SolverConfigurationPanel;
import java.awt.Component;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Alexander
 */
public class BacktrackingPanel extends javax.swing.JPanel implements SolverConfigurationPanel {

    /** Creates new form BacktrackingPanel */
    public BacktrackingPanel() {
        initComponents();

        Vector<SelectUnassignedVariableStrategy> variableItems = new Vector<SelectUnassignedVariableStrategy>();
        variableItems.add(new UnorderedVariableSelector());
        variableItems.add(new StaticVariableOrder("Most constrained variable first", new MostConstrainedComparator()));
        variableItems.add(new MinimumRemainingValuesSelecter("Minimum remaining values"));
        variableItems.add(new MinimumRemainingValuesSelecter("Minimum remaining values + Most constrained"));
        variableItems.add(new StaticVariableOrder("Random sequence", new RandomVariableComparator()));
        
        ComboBoxModel varModel = new DefaultComboBoxModel(variableItems);
        variableSelectionStrategyCmbBox.setModel(varModel);

        Vector< KeyStrategyPair<SelectNextValueStrategy> > valueItems = new Vector<KeyStrategyPair<SelectNextValueStrategy>>();
        valueItems.add(new KeyStrategyPair<SelectNextValueStrategy>("Sequential", BasicValueSelecter.class));
        valueItems.add(new KeyStrategyPair<SelectNextValueStrategy>("Random", RandomValueSelecter.class));
        valueItems.add(new KeyStrategyPair<SelectNextValueStrategy>("Minimum conflicts", MinimumConflictsValueSelecter.class));

        ComboBoxModel valueModel = new DefaultComboBoxModel(valueItems);

        valueSelectionStrategyCmbBox.setRenderer(getCellRenderer());
        valueSelectionStrategyCmbBox.setModel(valueModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        constraintPropagationCmbBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        variableSelectionStrategyCmbBox = new javax.swing.JComboBox();
        valueSelectionStrategyCmbBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel1.setText("Choose the level of consistency");

        constraintPropagationCmbBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Forward checking", "Arc consistency" }));
        constraintPropagationCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constraintPropagationCmbBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel2.setText("Variable selection strategy");

        variableSelectionStrategyCmbBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Random", "Min constrained first", "Max constrained first", "Max constrained first + Min remaining values", "Min remaining values" }));

        valueSelectionStrategyCmbBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Random", "Min constraining first", "Max constraining first" }));

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel3.setText("Value selection strategy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(constraintPropagationCmbBox, 0, 307, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(variableSelectionStrategyCmbBox, 0, 307, Short.MAX_VALUE)
                    .addComponent(valueSelectionStrategyCmbBox, 0, 307, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(constraintPropagationCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(variableSelectionStrategyCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(valueSelectionStrategyCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void constraintPropagationCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constraintPropagationCmbBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_constraintPropagationCmbBoxActionPerformed

    @Override
    public void setEnabled(boolean enabled) {
        constraintPropagationCmbBox.setEnabled(enabled);
        variableSelectionStrategyCmbBox.setEnabled(enabled);
        valueSelectionStrategyCmbBox.setEnabled(enabled);
        
    }

    public Object getSolverData() {
        BacktrackingData data = new BacktrackingData();
        if(constraintPropagationCmbBox.getSelectedItem().equals("Forward checking"))
            data.setConstraintPropagationLevel(ContraintPropagationLevel.FORWARD_CHECKING);

        SelectUnassignedVariableStrategy varStrat = (SelectUnassignedVariableStrategy) variableSelectionStrategyCmbBox.getSelectedItem();
        KeyStrategyPair<SelectNextValueStrategy> nextVal = (KeyStrategyPair<SelectNextValueStrategy>) valueSelectionStrategyCmbBox.getSelectedItem();

        data.setVariableSelecter(varStrat);
        data.setSelectNextValueStrategy(nextVal.getStrategyClass());
        return data;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox constraintPropagationCmbBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox valueSelectionStrategyCmbBox;
    private javax.swing.JComboBox variableSelectionStrategyCmbBox;
    // End of variables declaration//GEN-END:variables

    private ListCellRenderer getCellRenderer() {
       return new DefaultListCellRenderer(){
             @Override
           public Component getListCellRendererComponent(
                   JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
               super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
               if (value instanceof KeyStrategyPair<?>) {
                   KeyStrategyPair<?> mec = (KeyStrategyPair<?>)value;
                   setText(mec.getKey());
               }
               return this;
           }
        };
    }

}
