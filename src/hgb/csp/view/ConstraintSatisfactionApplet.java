/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConstraintSatisfactionApplet.java
 *
 * Created on Dec 25, 2010, 8:25:50 PM
 */
package hgb.csp.view;

import com.jtattoo.plaf.acryl.AcrylLookAndFeel;
import com.jtattoo.plaf.smart.SmartLookAndFeel;
import hgb.csp.domain.Constraint;
import hgb.csp.domain.DomainItem;
import hgb.csp.domain.Variable;
import hgb.csp.events.UICommandEvent;
import hgb.csp.search.AbstractSolver;
import hgb.csp.search.SolverPair;
import hgb.csp.search.SolverSource;
import hgb.csp.search.mvc.SearchEvent;
import hgb.csp.mvc.Handles;
import hgb.csp.problems.Problem;
import hgb.csp.statistics.StatisticsController;
import java.awt.Component;
import java.awt.GridLayout;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.jgrapht.ListenableGraph;

/**
 *
 * @author Alexander
 */
public class ConstraintSatisfactionApplet extends JFrame {

   private SolverConfigurationPanel solverConfigurationPanel;
   private AbstractSolver solver;
   private ListenableGraph<Variable, Constraint> csp;
   private Problem currentProblem;
   private boolean paused;
   private ProblemVisualization problemVisualization;
   private StatisticsController statisticsController;

   /** Creates new form ConstraintSatisfactionApplet */
   public ConstraintSatisfactionApplet() {
      initComponents();
      problemSettingsPanel1.setEnabled(false);

      enableControls(false);

      // populate solver list
      List<SolverPair> solvers = SolverSource.getAllSolvers();
      ComboBoxModel model = new DefaultComboBoxModel(solvers.toArray());
      solverSelecter.setModel(model);
      solverConfigContainer.setLayout(new GridLayout(1, 1));
      setSolver();

      statisticsController = new StatisticsController();
      statisticsController.addObserver(statisticsPanel1);
      // attach to problem choose panel
      problemChoosePanel1.addObserver(this);
   }

   public ListenableGraph<Variable, Constraint> getCsp() {
      return csp;
   }

   public void setCsp(ListenableGraph<Variable, Constraint> csp) {
      this.csp = csp;
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        problemViewPanel = new javax.swing.JPanel();
        problemChoosePanel1 = new hgb.csp.view.ProblemChoosePanel();
        problemSettingsPanel1 = new hgb.csp.view.ChatPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        statisticsPanel1 = new hgb.csp.view.StatisticsPanel();
        jSeparator1 = new javax.swing.JSeparator();
        solverConfigContainer = new javax.swing.JPanel();
        solverSelecter = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        openFromFileButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        intervalSlider = new javax.swing.JSlider();
        intervalTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Constraint Satisfaction Workbench");

        jSplitPane1.setDividerLocation(900);

        jSplitPane2.setDividerLocation(550);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        problemViewPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout problemViewPanelLayout = new javax.swing.GroupLayout(problemViewPanel);
        problemViewPanel.setLayout(problemViewPanelLayout);
        problemViewPanelLayout.setHorizontalGroup(
            problemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(problemViewPanelLayout.createSequentialGroup()
                .addComponent(problemChoosePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        problemViewPanelLayout.setVerticalGroup(
            problemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(problemViewPanelLayout.createSequentialGroup()
                .addComponent(problemChoosePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(problemViewPanel);
        jSplitPane2.setRightComponent(problemSettingsPanel1);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        javax.swing.GroupLayout solverConfigContainerLayout = new javax.swing.GroupLayout(solverConfigContainer);
        solverConfigContainer.setLayout(solverConfigContainerLayout);
        solverConfigContainerLayout.setHorizontalGroup(
            solverConfigContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        solverConfigContainerLayout.setVerticalGroup(
            solverConfigContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 291, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solverConfigContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
            .addComponent(statisticsPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(solverConfigContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statisticsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );

        jSplitPane3.setBottomComponent(jPanel3);

        solverSelecter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        solverSelecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solverSelecterActionPerformed(evt);
            }
        });
        jSplitPane3.setLeftComponent(solverSelecter);

        jSplitPane1.setRightComponent(jSplitPane3);

        jToolBar1.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/processes.png"))); // NOI18N
        openButton.setToolTipText("Open existing constraint satisfaction problem");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        openFromFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/add.png"))); // NOI18N
        openFromFileButton.setFocusable(false);
        openFromFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFromFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(openFromFileButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/floppy_disc.png"))); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(saveButton);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/play.png"))); // NOI18N
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(playButton);

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/pause.png"))); // NOI18N
        pauseButton.setFocusable(false);
        pauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pauseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(pauseButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/stop.png"))); // NOI18N
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(stopButton);

        jLabel1.setText("Waiting interval in milliseconds");
        jToolBar1.add(jLabel1);

        intervalSlider.setMajorTickSpacing(50);
        intervalSlider.setMaximum(2000);
        intervalSlider.setMinorTickSpacing(50);
        intervalSlider.setPaintTicks(true);
        intervalSlider.setSnapToTicks(true);
        intervalSlider.setMaximumSize(new java.awt.Dimension(200, 23));
        intervalSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                releasedIntervalSlider(evt);
            }
        });
        jToolBar1.add(intervalSlider);

        intervalTextField.setEditable(false);
        intervalTextField.setText("50");
        intervalTextField.setMaximumSize(new java.awt.Dimension(66, 20));
        intervalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalTextFieldActionPerformed(evt);
            }
        });
        jToolBar1.add(intervalTextField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1326, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1306, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   public void showChooseProblemDialog() {
      SwingUtilities.invokeLater(new Runnable() {

         public void run() {
            problemViewPanel.removeAll();
            problemViewPanel.add(problemChoosePanel1);
            problemViewPanel.setLayout(new GridLayout(1, 1));
            problemViewPanel.updateUI();
         }
      });

   }

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
       showChooseProblemDialog();
    }//GEN-LAST:event_openButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed

       if (paused) {
          solver.resume();
       }

       solver.stop();
       restoreAfterStop();
}//GEN-LAST:event_stopButtonActionPerformed

   private void restoreAfterStop() {
      playButton.setEnabled(true);
      stopButton.setEnabled(false);
      pauseButton.setEnabled(false);
      paused = false;
   }

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
       solver.pause();
       paused = true;
       playButton.setEnabled(true);
}//GEN-LAST:event_pauseButtonActionPerformed

   @Handles(type = SearchEvent.SOLUTION_FOUND)
   public void solverStopped(SearchEvent event) {
      paused = false;
      restoreAfterStop();
   }

   private void resetCsp(ListenableGraph<Variable, Constraint> csp) {
      for (Variable v : csp.vertexSet()) {
         v.setAssignedValue(null);
         for (DomainItem di : v.getDomain()) {
            di.setAvailable(true);
         }
         v.setAvailableDomainItems(v.getDomain().size());
         v.setConstraints(csp.edgesOf(v).size());
      }
   }

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
       if (paused) {
          solver.resume();
       } else {
          resetCsp(csp);
          solver.configureSolver(solverConfigurationPanel.getSolverData());
          solver.setInterval(intervalSlider.getValue());
          solver.removeAllObservers();
          solver.addObserver(problemVisualization);
          solver.addObserver(statisticsController);
          solver.addObserver(problemSettingsPanel1);
          solver.addObserver(this);
          solver.setProblem(currentProblem); // let solver know about problem metadata
          solver.solve(getCsp());
       }

       playButton.setEnabled(false);
       pauseButton.setEnabled(true);
       stopButton.setEnabled(true);
}//GEN-LAST:event_playButtonActionPerformed

   private void setSolver() {
      solverConfigContainer.removeAll();

      SolverPair selectedPair = (SolverPair) solverSelecter.getSelectedItem();
      solverConfigurationPanel = selectedPair.getPanel();
      solverConfigContainer.add((Component) selectedPair.getPanel());
      solverConfigContainer.setLayout(new GridLayout(1, 1));
      solver = selectedPair.getSolver();
      solverConfigContainer.updateUI();
   }

    private void solverSelecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solverSelecterActionPerformed
       setSolver();
    }//GEN-LAST:event_solverSelecterActionPerformed

    private void intervalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalTextFieldActionPerformed
       // TODO add your handling code here:
    }//GEN-LAST:event_intervalTextFieldActionPerformed

    private void releasedIntervalSlider(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_releasedIntervalSlider
       intervalTextField.setText(Integer.toString(intervalSlider.getValue()));
       if (solver != null) {
          solver.setInterval(intervalSlider.getValue());
       }
    }//GEN-LAST:event_releasedIntervalSlider

   @Handles(type = UICommandEvent.PROBLEM_SELECTED)
   public void problemSelectedHandler(UICommandEvent evt) {
      Problem p = (Problem) evt.getAttachedObject();
      problemSelected(p);
   }

   public void problemSelected(Problem selectedProblem) {
      playButton.setEnabled(true);
      problemSettingsPanel1.setEnabled(true);
      solverConfigurationPanel.setEnabled(true);

      // bind constraint graph to view
      problemVisualization = selectedProblem.getProposedView();

      // store problem for further needs (getting the key)
      currentProblem = selectedProblem;

      // tie controlPanel to solver
      setCsp(selectedProblem.getCsp());
      problemVisualization.bind(selectedProblem.getCsp());

      SwingUtilities.invokeLater(new Runnable() {

         public void run() {
            problemViewPanel.removeAll();
            problemViewPanel.setLayout(new GridLayout(1, 1));
            problemViewPanel.add((Component) problemVisualization);
            problemViewPanel.updateUI();
         }
      });
   }

   /**
    * @param args the command line arguments
    */
   public static void main(final String args[]) {
      JFrame.setDefaultLookAndFeelDecorated(true);
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {

            try {

               UIManager.setLookAndFeel(new AcrylLookAndFeel());
               // UIManager.setLookAndFeel(new SubstanceBusinessBlueSteelLookAndFeel());
            } catch (UnsupportedLookAndFeelException e1) {
               System.out.println("An error occured in " + e1);
            }

            ConstraintSatisfactionApplet app = new ConstraintSatisfactionApplet();
            app.setVisible(true);
            //app.showChooseProblemDialog();
         }
      });
   }

   private void enableControls(final boolean b) {
      playButton.setEnabled(b);
      pauseButton.setEnabled(b);
      stopButton.setEnabled(b);
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider intervalSlider;
    private javax.swing.JTextField intervalTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton openFromFileButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private hgb.csp.view.ProblemChoosePanel problemChoosePanel1;
    private hgb.csp.view.ChatPanel problemSettingsPanel1;
    private javax.swing.JPanel problemViewPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel solverConfigContainer;
    private javax.swing.JComboBox solverSelecter;
    private hgb.csp.view.StatisticsPanel statisticsPanel1;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
