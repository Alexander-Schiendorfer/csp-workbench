/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Chessboard.java
 *
 * Created on Dec 26, 2010, 10:58:47 PM
 */
package hgb.csp.problems.nqueens;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;

/**
 *
 * @author Alexander
 */
public class Chessboard extends javax.swing.JPanel {

    private int[] queenCols; // queenCols[i] = 0 <=> NotPlaced(queen)
    private int squareSide = 40;
    private int leftMargin = 25;
    private int downMargin = 25;
    private int textualYOffset = 5;
    private int textualXOffset = 5;

    /**
     * Expecting queens with ids ranging from 1..n
     * and cols ranging from 1..n as well
     * @param queenId - the id of the current queen (1 <= queenId <= n)
     * @param col - current col (0=unassigned) (1 <= col <= n)
     */
    public void placeQueen(int queenId, int col) {
        queenCols[queenId - 1] = col;
    }

    /** Creates new form Chessboard */
    public Chessboard() {
        initComponents();
    }

    public void setUp(int n) {
        queenCols = new int[n];
    }

    private void switchColor(Graphics g) {
        if (g.getColor().equals(Color.BLACK)) {
            g.setColor(Color.WHITE);
        } else {
            g.setColor(Color.BLACK);
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        if(queenCols == null)
            return;
        g.setColor(Color.BLACK);
        int n = queenCols.length;
        // labelling of rows
        int xPos = 0;
        int yBaseLine = n * squareSide;
        for(int i = 0; i < n; i++) {
            char[] drawingChars = Integer.toString(i+1).toCharArray();
            g.drawChars(drawingChars, 0, drawingChars.length, xPos, yBaseLine - i*squareSide - textualYOffset);
        }

        // labelling of columns
        for(int j = 0; j < queenCols.length; j++) {
            char x = 'a';
            x+=j;
            char[] chars = new char[]{x};
            g.drawChars(chars, 0, chars.length, leftMargin +textualXOffset + j*squareSide, yBaseLine + downMargin);
        }

        g.setColor(Color.WHITE);
        if (queenCols != null) {
            for (int i = 0; i < queenCols.length; i++) {
                for (int j = 0; j < queenCols.length; j++) {
                    g.fillRect(leftMargin + j * squareSide, i * squareSide, squareSide, squareSide);
                    switchColor(g);
                }
                if(queenCols.length % 2 == 0)
                    switchColor(g);
            }
        }

        // place queens
        Image queenImg = new javax.swing.ImageIcon(getClass().getResource("/hgb/csp/resources/queenSmall.png")).getImage();

        int xOffset = (squareSide - queenImg.getWidth(this) )/2;
        int yOffset = (squareSide - queenImg.getHeight(this))/2;
        for(int i = 0; i < n; i++) {
            if(queenCols[i]>0) {
               g.drawImage(queenImg, leftMargin + (queenCols[i]-1)*squareSide + xOffset, yBaseLine - (i+1)*squareSide + yOffset, this);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
