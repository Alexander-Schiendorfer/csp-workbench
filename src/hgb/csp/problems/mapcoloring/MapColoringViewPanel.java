/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphColoringViewPanel.java
 *
 * Created on Dec 25, 2010, 9:26:59 PM
 */
package hgb.csp.problems.mapcoloring;

import com.kitfox.svg.SVGDiagram;
import com.kitfox.svg.SVGElement;
import com.kitfox.svg.SVGElementException;
import com.kitfox.svg.SVGRoot;
import com.kitfox.svg.SVGUniverse;
import com.kitfox.svg.animation.AnimationElement;
import hgb.csp.domain.Constraint;
import hgb.csp.domain.Variable;
import hgb.csp.search.mvc.SearchEvent;
import hgb.csp.mvc.Handles;
import hgb.csp.view.ProblemVisualization;
import java.awt.Dimension;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.jgrapht.ListenableGraph;

/**
 *
 * @author Alexander
 */
public class MapColoringViewPanel extends javax.swing.JPanel implements ProblemVisualization {

    private static final String DEFAULT_BG_COLOR = "white";
    private static final Dimension DEFAULT_SIZE = new Dimension(600, 400);

    ListenableGraph<Variable, Constraint> constraintGraph;
    Map<Variable, SVGElement> shortcut;
    SVGUniverse universe;
    SVGDiagram diagram;

    /** Creates new form GraphColoringViewPanel */
    public MapColoringViewPanel() {
        initComponents();
    }

    public void readSvgFromInput(InputStream is, String name) {
        universe = new SVGUniverse();
        try {
            URI svgUri = universe.loadSVG(is, name);
            diagram = universe.getDiagram(svgUri);
            svgPanel.setDiagram(diagram);
        } catch (IOException ex) {
            Logger.getLogger(MapColoringViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void bind(ListenableGraph<Variable, Constraint> csp) {
        constraintGraph = csp;
        shortcut = new HashMap<Variable, SVGElement>(2*csp.vertexSet().size());
        SVGRoot root  = diagram.getRoot();
        SVGElement states = root.getChild("States");

        for(Variable v : csp.vertexSet()) {
            SVGElement state = states.getChild(v.getName());
            shortcut.put(v, state);
            try {
                state.setAttribute("fill", AnimationElement.AT_CSS, DEFAULT_BG_COLOR);
            } catch (SVGElementException ex) {
                Logger.getLogger(MapColoringViewPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.updateUI();
    }

    @Handles(type=SearchEvent.ASSIGNMENT_OCCURED)
    public synchronized void assignmentHappened(SearchEvent se) {
        // redraw call necessary
        final Variable affectedVariable = se.getAssociatedVariable();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                if(affectedVariable == null)
                    for (Variable v : constraintGraph.vertexSet()) {
                        colorVertex(v, getColorFor(v));
                    }
                else {
                    colorVertex(affectedVariable, getColorFor(affectedVariable));
                }
            }
        });
        updateUI();
    }

    private void colorVertex(Variable v, String c) {
        String color = getColorFor(v);
        try {
            shortcut.get(v).setAttribute("fill", AnimationElement.AT_CSS, color);
        } catch (SVGElementException ex) {
            Logger.getLogger(MapColoringViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getColorFor(Variable v) {

        if (v.getAssignedValue() == null) {
            return DEFAULT_BG_COLOR;
        }

        // this instance can safely assume that values are integers
        int ci = (Integer)v.getAssignedValue();
        switch (ci) {
            case 1:
                return "rgb(255, 208, 208)";
            case 2:
                return "rgb(255, 255, 208)";
            case 3:
                return "rgb(215, 255, 208)";
            case 4:
                return "rgb(255, 208, 155)";
            case 5:
                return "rgb(232, 190, 155)";
        }
        return DEFAULT_BG_COLOR;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        svgPanel = new com.kitfox.svg.SVGDisplayPanel();

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Map coloring problem visualization");

        javax.swing.GroupLayout svgPanelLayout = new javax.swing.GroupLayout(svgPanel);
        svgPanel.setLayout(svgPanelLayout);
        svgPanelLayout.setHorizontalGroup(
            svgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
        );
        svgPanelLayout.setVerticalGroup(
            svgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(svgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(svgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private com.kitfox.svg.SVGDisplayPanel svgPanel;
    // End of variables declaration//GEN-END:variables
}
